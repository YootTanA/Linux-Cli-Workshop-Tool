#!/bin/bash

# Default ENV settings
SALT=linux
USER_CSV=./generated-users/user.csv
USER_JSON=./generated-users/user.json

VISUALISER_USER_JSON=./visualizer/database/user.json

if [ -z "$1" ]; then
  echo "Please provide a number of generating user."
  exit 1
fi
COUNT=$1

# Remove user.json since we want to generate a fresh new.
rm -f $USER_JSON

if [ ! -e "$USER_CSV" ]; then
   echo "username,password" > $USER_CSV
fi

for ((i=1; i<=COUNT; i++)); do 
   last_user_number=$(ls /home | grep user | nl | awk -F ' ' 'END {print $1}')
   new_user="user-$((last_user_number + 1))"
   new_user_password=$(echo "SEED" | openssl passwd -1 -stdin)
   
   # Adding new user to the server.
   # ONLY STDERR can be seen in this command.
   sudo useradd -m $new_user > /dev/null 2>&1
   echo "$new_user:$new_user_password" | sudo chpasswd > /dev/null 2>&1
   chsh -s /bin/bash $new_user
   
   # Giving a starter pack for new user
   sudo cp -r ./starter-pack/* /home/$new_user/
   sudo chown -R $new_user:$new_user /home/$new_user/*
   
   # Generate user information
   echo "$new_user,$new_user_password" >> $USER_CSV
done

# Generate a user.json
awk -F, '
NR==1 {
    for (i=1; i<=NF; i++) header[i] = $i;
}
NR>1 {
    printf "{";
    for (i=1; i<=NF; i++) {
        printf "\"%s\": \"%s\"", header[i], $i;
        if (i < NF) printf ", ";
    }
    print "}";
} 
' $USER_CSV > "$USER_JSON.tmp"
jq -s '.' "$USER_JSON.tmp" > $USER_JSON
rm -f "$USER_JSON.tmp"

cat $USER_JSON > $VISUALISER_USER_JSON
